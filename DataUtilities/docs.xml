<docs>
<doc name="T:PeterO.DataUtilities">

            <summary>Contains methods useful for reading and writing text
            strings. It is designed to have no dependencies other than the
            basic runtime class library.
            <para>Many of these methods work with text encoded in UTF-8, an
            encoding form of the Unicode Standard which uses one byte to encode
            the most basic characters and two to four bytes to encode other
            characters. For example, the <c>GetUtf8</c> method converts a text
            string to an array of bytes in UTF-8.</para>
            <para>In C# and Java, text strings are represented as sequences of
            16-bit values called <c>char</c> s. These sequences are well-formed
            under UTF-16, a 16-bit encoding form of Unicode, except if they
            contain unpaired surrogate code points. (A surrogate code point is
            used to encode supplementary characters, those with code points
            U+10000 or higher, in UTF-16. A surrogate pair is a high surrogate,
            U+D800 to U+DBFF, followed by a low surrogate, U+DC00 to U+DFFF. An
            unpaired surrogate code point is a surrogate not appearing in a
            surrogate pair.) Many of the methods in this class allow setting
            the behavior to follow when unpaired surrogate code points are
            found in text strings, such as throwing an error or treating the
            unpaired surrogate as a replacement character
            (U+FFFD).</para></summary>

</doc>
<doc name="M:PeterO.DataUtilities.CodePointAt(System.String,System.Int32)">

            <summary>Gets the Unicode code point at the given index of the
            string.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>Index of the current position into the
            string.</param>
            <returns>The Unicode code point at the given position. Returns -1
            if <paramref name='index'/> is 0 or less, or is greater than the
            string's length. Returns the replacement character (U+FFFD) if the
            code point at that position is an unpaired surrogate code point. If
            the return value is 65536 (0x10000) or greater, the code point
            takes up two UTF-16 code units.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='str'/> is null.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.CodePointAt(System.String,System.Int32,System.Int32)">

            <summary>Gets the Unicode code point at the given index of the
            string.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>Index of the current position into the
            string.</param>
            <param name='surrogateBehavior'>Specifies what kind of value to
            return if the code point at the given index is an unpaired
            surrogate code point: if 0, return the replacement character (U+FFFD); if 1, return the value of the surrogate code point; if
            neither 0 nor 1, return -1.</param>
            <returns>The Unicode code point at the given position. Returns -1
            if <paramref name='index'/> is 0 or less, or is greater than the
            string's length. Returns a value as specified under <paramref name='surrogateBehavior'/> if the code point at that position is an
            unpaired surrogate code point. If the return value is 65536
            (0x10000) or greater, the code point takes up two UTF-16 code
            units.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='str'/> is null.</exception>
            <example><para>The following example shows how to iterate a text string code
            point by code point, terminating the loop when an unpaired
            surrogate is found.</para>
            <code>for (var i = 0;i&lt;str.Length; ++i) { int codePoint =
            DataUtilities.CodePointAt(str, i, 2); if (codePoint &lt; 0) { break; /*
            Unpaired surrogate */ } Console.WriteLine("codePoint:"+codePoint); if
            (codePoint &gt;= 0x10000) { i++; /* Supplementary code point */ } }</code> .
            </example>

</doc>
<doc name="M:PeterO.DataUtilities.CodePointBefore(System.String,System.Int32)">

            <summary>Gets the Unicode code point just before the given index of
            the string.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>Index of the current position into the
            string.</param>
            <returns>The Unicode code point at the previous position. Returns
            -1 if <paramref name='index'/> is 0 or less, or is greater than the
            string's length. Returns the replacement character (U+FFFD) if the
            code point at the previous position is an unpaired surrogate code
            point. If the return value is 65536 (0x10000) or greater, the code
            point takes up two UTF-16 code units.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='str'/> is null.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.CodePointBefore(System.String,System.Int32,System.Int32)">

            <summary>Gets the Unicode code point just before the given index of
            the string.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>Index of the current position into the
            string.</param>
            <param name='surrogateBehavior'>Specifies what kind of value to
            return if the previous code point is an unpaired surrogate code
            point: if 0, return the replacement character (U+FFFD); if 1,
            return the value of the surrogate code point; if neither 0 nor 1,
            return -1.</param>
            <returns>The Unicode code point at the previous position. Returns
            -1 if <paramref name='index'/> is 0 or less, or is greater than the
            string's length. Returns a value as specified under <paramref name='surrogateBehavior'/> if the code point at the previous
            position is an unpaired surrogate code point. If the return value
            is 65536 (0x10000) or greater, the code point takes up two UTF-16
            code units.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='str'/> is null.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.CodePointCompare(System.String,System.String)">

            <summary>Compares two strings in Unicode code point order. Unpaired
            surrogate code points are treated as individual code
            points.</summary>
            <param name='strA'>The first string. Can be null.</param>
            <param name='strB'>The second string. Can be null.</param>
            <returns>A value indicating which string is " less" or " greater" .
            0: Both strings are equal or null. Less than 0: a is null and b
            isn't; or the first code point that's different is less in A than
            in B; or b starts with a and is longer than a. Greater than 0: b is
            null and a isn't; or the first code point that's different is
            greater in A than in B; or a starts with b and is longer than
            b.</returns>

</doc>
<doc name="M:PeterO.DataUtilities.CodePointLength(System.String)">

            <summary>Finds the number of Unicode code points in the given text
            string. Unpaired surrogate code points increase this number by 1.
            This is not necessarily the length of the string in "char"
            s.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <returns>The number of Unicode code points in the given
            string.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='str'/> is null.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.GetUtf8Bytes(System.String,System.Boolean)">

            <summary><para>Encodes a string in UTF-8 as a byte array. This method does
            not insert a byte-order mark (U+FEFF) at the beginning of the
            encoded byte array.</para>
            <para>REMARK: It is not recommended to use
            <c>Encoding.UTF8.GetBytes</c> in.NET, or the <c>getBytes()</c> method in Java to do this. For instance, <c>getBytes()</c> encodes
            text strings in a default (so not fixed) character encoding, which
            can be undesirable.</para></summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='replace'>If true, replaces unpaired surrogate code
            points with the replacement character (U+FFFD). If false, stops
            processing when an unpaired surrogate code point is seen.</param>
            <returns>The string encoded in UTF-8.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='str'/> is null.</exception>
            <exception cref='ArgumentException'>The string contains an unpaired
            surrogate code point and <paramref name='replace'/> is false, or an
            internal error occurred.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.GetUtf8Bytes(System.String,System.Boolean,System.Boolean)">

            <summary><para>Encodes a string in UTF-8 as a byte array. This method does
            not insert a byte-order mark (U+FEFF) at the beginning of the
            encoded byte array.</para>
            <para>REMARK: It is not recommended to use
            <c>Encoding.UTF8.GetBytes</c> in.NET, or the <c>getBytes()</c> method in Java to do this. For instance, <c>getBytes()</c> encodes
            text strings in a default (so not fixed) character encoding, which
            can be undesirable.</para></summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='replace'>If true, replaces unpaired surrogate code
            points with the replacement character (U+FFFD). If false, stops
            processing when an unpaired surrogate code point is seen.</param>
            <param name='lenientLineBreaks'>If true, replaces carriage return
            (CR) not followed by line feed (LF) and LF not preceded by CR with
            CR-LF pairs.</param>
            <returns>The string encoded in UTF-8.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='str'/> is null.</exception>
            <exception cref='ArgumentException'>The string contains an unpaired
            surrogate code point and <paramref name='replace'/> is false, or an
            internal error occurred.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.GetUtf8Length(System.String,System.Boolean)">

            <summary>Calculates the number of bytes needed to encode a string
            in UTF-8.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='replace'>If true, treats unpaired surrogate code
            points as having 3 UTF-8 bytes (the UTF-8 length of the replacement
            character U+FFFD).</param>
            <returns>The number of bytes needed to encode the given string in
            UTF-8, or -1 if the string contains an unpaired surrogate code
            point and <paramref name='replace'/> is false.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='str'/> is null.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.GetUtf8String(System.Byte[],System.Boolean)">

            <summary>Generates a text string from a UTF-8 byte array.</summary>
            <param name='bytes'>A byte array containing text encoded in
            UTF-8.</param>
            <param name='replace'>If true, replaces invalid encoding with the
            replacement character (U+FFFD). If false, stops processing when
            invalid UTF-8 is seen.</param>
            <returns>A string represented by the UTF-8 byte array.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='bytes'/> is null.</exception>
            <exception cref='ArgumentException'>The string is not valid UTF-8
            and <paramref name='replace'/> is false.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.GetUtf8String(System.Byte[],System.Int32,System.Int32,System.Boolean)">

            <summary>Generates a text string from a portion of a UTF-8 byte
            array.</summary>
            <param name='bytes'>A byte array containing text encoded in
            UTF-8.</param>
            <param name='offset'>Offset into the byte array to start
            reading.</param>
            <param name='bytesCount'>Length, in bytes, of the UTF-8 text
            string.</param>
            <param name='replace'>If true, replaces invalid encoding with the
            replacement character (U+FFFD). If false, stops processing when
            invalid UTF-8 is seen.</param>
            <returns>A string represented by the UTF-8 byte array.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='bytes'/> is null.</exception>
            <exception cref='ArgumentException'>The portion of the byte array
            is not valid UTF-8 and <paramref name='replace'/> is
            false.</exception>
            <exception cref='ArgumentException'>The parameter <paramref name='offset'/> is less than 0, <paramref name='bytesCount'/> is
            less than 0, or offset plus bytesCount is greater than the length
            of "data" .</exception>

</doc>
<doc name="M:PeterO.DataUtilities.ReadUtf8(System.IO.Stream,System.Int32,System.Text.StringBuilder,System.Boolean)">

            <summary>Reads a string in UTF-8 encoding from a data
            stream.</summary>
            <param name='stream'>A readable data stream.</param>
            <param name='bytesCount'>The length, in bytes, of the string. If
            this is less than 0, this function will read until the end of the
            stream.</param>
            <param name='builder'>A string builder object where the resulting
            string will be stored.</param>
            <param name='replace'>If true, replaces invalid encoding with the
            replacement character (U+FFFD). If false, stops processing when an
            unpaired surrogate code point is seen.</param>
            <returns>0 if the entire string was read without errors, -1 if the
            string is not valid UTF-8 and <paramref name='replace'/> is false,
            or -2 if the end of the stream was reached before the last
            character was read completely (which is only the case if <paramref name='bytesCount'/> is 0 or greater).</returns>
            <exception cref='System.IO.IOException'>An I/O error
            occurred.</exception>
            <exception cref='ArgumentNullException'>The parameter <paramref name='stream'/> is null or <paramref name='builder'/> is
            null.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.ReadUtf8FromBytes(System.Byte[],System.Int32,System.Int32,System.Text.StringBuilder,System.Boolean)">

            <summary>Reads a string in UTF-8 encoding from a byte
            array.</summary>
            <param name='data'>A byte array containing a UTF-8 text
            string.</param>
            <param name='offset'>Offset into the byte array to start
            reading.</param>
            <param name='bytesCount'>Length, in bytes, of the UTF-8 text
            string.</param>
            <param name='builder'>A string builder object where the resulting
            string will be stored.</param>
            <param name='replace'>If true, replaces invalid encoding with the
            replacement character (U+FFFD). If false, stops processing when
            invalid UTF-8 is seen.</param>
            <returns>0 if the entire string was read without errors, or -1 if
            the string is not valid UTF-8 and <paramref name='replace'/> is
            false.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='data'/> is null or <paramref name='builder'/> is
            null.</exception>
            <exception cref='ArgumentException'>The parameter <paramref name='offset'/> is less than 0, <paramref name='bytesCount'/> is
            less than 0, or offset plus bytesCount is greater than the length
            of <paramref name='data'/>.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.ReadUtf8ToString(System.IO.Stream)">

            <summary>Reads a string in UTF-8 encoding from a data stream in
            full and returns that string. Replaces invalid encoding with the
            replacement character (U+FFFD).</summary>
            <param name='stream'>A readable data stream.</param>
            <returns>The string read.</returns>
            <exception cref='System.IO.IOException'>An I/O error
            occurred.</exception>
            <exception cref='ArgumentNullException'>The parameter <paramref name='stream'/> is null.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.ReadUtf8ToString(System.IO.Stream,System.Int32,System.Boolean)">

            <summary>Reads a string in UTF-8 encoding from a data stream and
            returns that string.</summary>
            <param name='stream'>A readable data stream.</param>
            <param name='bytesCount'>The length, in bytes, of the string. If
            this is less than 0, this function will read until the end of the
            stream.</param>
            <param name='replace'>If true, replaces invalid encoding with the
            replacement character (U+FFFD). If false, throws an error if an
            unpaired surrogate code point is seen.</param>
            <returns>The string read.</returns>
            <exception cref='System.IO.IOException'>An I/O error occurred; or,
            the string is not valid UTF-8 and <paramref name='replace'/> is
            false.</exception>
            <exception cref='ArgumentNullException'>The parameter <paramref name='stream'/> is null.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.ToLowerCaseAscii(System.String)">

            <summary>Returns a string with the basic upper-case letters A to Z
            (U+0041 to U+005A) converted to the corresponding basic lower-case letters. Other characters remain
            unchanged.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <returns>The converted string, or null if <paramref name='str'/> is
            null.</returns>

</doc>
<doc name="M:PeterO.DataUtilities.ToUpperCaseAscii(System.String)">

            <summary>Returns a string with the basic lower-case letters A to Z
            (U+0061 to U+007A) converted to the corresponding basic upper-case letters. Other characters remain
            unchanged.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <returns>The converted string, or null if <paramref name='str'/> is
            null.</returns>

</doc>
<doc name="M:PeterO.DataUtilities.WriteUtf8(System.String,System.IO.Stream,System.Boolean)">

            <summary>Writes a string in UTF-8 encoding to a data
            stream.</summary>
            <param name='str'>A string to write.</param>
            <param name='stream'>A writable data stream.</param>
            <param name='replace'>If true, replaces unpaired surrogate code
            points with the replacement character (U+FFFD). If false, stops
            processing when an unpaired surrogate code point is seen.</param>
            <returns>0 if the entire string was written; or -1 if the string
            contains an unpaired surrogate code point and <paramref name='replace'/> is false.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='str'/> is null or <paramref name='stream'/> is
            null.</exception>
            <exception cref='System.IO.IOException'>An I/O error
            occurred.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.WriteUtf8(System.String,System.Int32,System.Int32,System.IO.Stream,System.Boolean)">

            <summary>Writes a portion of a string in UTF-8 encoding to a data
            stream.</summary>
            <param name='str'>A string to write.</param>
            <param name='offset'>The Index starting at 0 where the string
            portion to write begins.</param>
            <param name='length'>The length of the string portion to
            write.</param>
            <param name='stream'>A writable data stream.</param>
            <param name='replace'>If true, replaces unpaired surrogate code
            points with the replacement character (U+FFFD). If false, stops
            processing when an unpaired surrogate code point is seen.</param>
            <returns>0 if the entire string portion was written; or -1 if the
            string portion contains an unpaired surrogate code point and
            <paramref name='replace'/> is false.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='str'/> is null or <paramref name='stream'/> is
            null.</exception>
            <exception cref='System.IO.IOException'>An I/O error
            occurred.</exception>
            <exception cref='ArgumentException'>Either <paramref name='offset'/> or <paramref name='length'/> is less than 0 or
            greater than <paramref name='str'/> 's length, or <paramref name='str'/> 's length minus <paramref name='offset'/> is less than
            <paramref name='length'/>.</exception>

</doc>
<doc name="M:PeterO.DataUtilities.WriteUtf8(System.String,System.Int32,System.Int32,System.IO.Stream,System.Boolean,System.Boolean)">

            <summary>Writes a portion of a string in UTF-8 encoding to a data
            stream.</summary>
            <param name='str'>A string to write.</param>
            <param name='offset'>The Index starting at 0 where the string
            portion to write begins.</param>
            <param name='length'>The length of the string portion to
            write.</param>
            <param name='stream'>A writable data stream.</param>
            <param name='replace'>If true, replaces unpaired surrogate code
            points with the replacement character (U+FFFD). If false, stops
            processing when an unpaired surrogate code point is seen.</param>
            <param name='lenientLineBreaks'>If true, replaces carriage return
            (CR) not followed by line feed (LF) and LF not preceded by CR with
            CR-LF pairs.</param>
            <returns>0 if the entire string portion was written; or -1 if the
            string portion contains an unpaired surrogate code point and
            <paramref name='replace'/> is false.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='str'/> is null or <paramref name='stream'/> is
            null.</exception>
            <exception cref='ArgumentException'>The parameter <paramref name='offset'/> is less than 0, <paramref name='length'/> is less
            than 0, or <paramref name='offset'/> plus <paramref name='length'/>
            is greater than the string's length.</exception>
            <exception cref='System.IO.IOException'>An I/O error
            occurred.</exception>

</doc>
</docs>
